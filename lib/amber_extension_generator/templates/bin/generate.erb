#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'pathname'
require 'fileutils'

require_relative '../<%= gem_entry_folder_path %>'

class ::GenerateCommand < ::Thor
  include ::Thor::Actions

  # @return [Module]
  LIBRARY_MODULE = <%= root_module_name %>
  # @return [String]
  LIBRARY_NAME = '<%= gem_name %>'
  # @return [Pathname]
  GEM_ROOT_PATH = ::Pathname.new ::File.expand_path('..', __dir__)
  # @return [Pathname]
  GEM_ENTRY_FOLDER_PATH = ::Pathname.new '<%= gem_entry_folder_path %>'

  class << self
    # Define the generator's root folder
    #
    # @return [String]
    def source_root
      ::File.expand_path('..', __dir__)
    end
  end

  desc 'component', 'Generate a new component'

  # @param name [String]
  # @return [void]
  def component(name)
    name = snake_case(name)
    name = "#{name}_component" unless name.end_with? '_component'
    file_name = "#{name}.rb"
    class_name = camelize(name)
    component_css_class = "#{LIBRARY_NAME}--#{name}"
    full_class_name = "#{LIBRARY_MODULE}::#{class_name}"
    abstract_component = LIBRARY_MODULE::ABSTRACT_COMPONENT
    component_path = GEM_ENTRY_FOLDER_PATH / 'components' / file_name
    component_asset_path = GEM_ENTRY_FOLDER_PATH / 'components' / name
    library_relative_path = LIBRARY_NAME.gsub('-', '/')

    template 'templates/component.rb.tt', component_path, context: binding
    ::FileUtils.mkdir component_asset_path unless ::Dir.exist? component_asset_path
    template 'templates/view.html.erb.tt', component_asset_path / 'view.html.erb', context: binding
    template 'templates/style.css.tt', component_asset_path / 'style.css', context: binding
    template 'templates/component_test.rb.tt',
             GEM_ROOT_PATH / 'test' / library_relative_path / 'components' / "#{name}_test.rb",
             context: binding
  end

  private

  # @param string [String]
  # @param uppercase_first_letter [Boolean]
  # @return [String]
  def camelize(string, uppercase_first_letter: true)
    string = if uppercase_first_letter
                string.sub(/^[a-z\d]*/, &:capitalize)
              else
                string.sub(/^(?:(?=\b|[A-Z_])|\w)/, &:downcase)
              end

    string.gsub!(%r{(?:_|(/))([a-z\d]*)}) do
      "#{::Regexp.last_match(1)}#{::Regexp.last_match(2).capitalize}"
    end
    string.gsub('/', '::')
  end

  # Converts a string in PascalCase or camelCase to snake_case.
  #
  #     snake_case('SomePascalCase') => "some_pascal_case"
  #
  # @param string [String]
  # @return [String]
  def snake_case(string)
    string.gsub(/([^A-Z])([A-Z]+)/, '\1_\2').downcase
  end
end

::GenerateCommand.start
